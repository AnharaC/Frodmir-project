from aiogram import types, F
import os

from aiogram.fsm.context import FSMContext
from aiogram.filters import CommandStart, Command, or_f, StateFilter
from aiogram.types import Message, FSInputFile

from keyboard.InlineKeyboard import get_callback_btns

from service.analysis_data import Punnett_table
from .MessageState import MessageState
from .router import user_private_router

from middleware.MessageMiddleware import UserMessageMiddleware
from middleware.CallbackMiddleware import CallbackMiddleware

user_private_router.message.middleware(UserMessageMiddleware())
user_private_router.callback_query.middleware(CallbackMiddleware())


## Handlers –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—á–∏ –∑–∞ –∫–æ–º–∞–Ω–¥–∏
@user_private_router.message(or_f(Command("start"), CommandStart(deep_link=True)))
async def command_start_handler(message: Message):
    stickers = os.path.join('assets', 'stickers', 'hi.webp')

    await message.answer_sticker(sticker=FSInputFile(stickers), emoji="üëã")
    await message.answer(text=(
        "üëã –ü—Ä–∏–≤—ñ—Ç! –¶–µ–π –±–æ—Ç –¥–æ–ø–æ–º–æ–∂–µ –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –≥–µ–Ω–µ—Ç–∏—á–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è üß¨. "
        "–í–∏ –∑–º–æ–∂–µ—Ç–µ –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –º–æ–∂–ª–∏–≤—ñ –≥–µ–Ω–æ—Ç–∏–ø–∏ —ñ –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—á—ñ –æ–∑–Ω–∞–∫ "
        "–Ω–∞—â–∞–¥–∫–∞–º üå± –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Ç–∞–±–ª–∏—Ü—ñ –ü–µ–Ω–Ω–µ—Ç–∞ üìä.\n\n"
        "–©–æ –≤–º—ñ—î —Ü–µ–π –±–æ—Ç:\n"
        "üß¨ –ê–Ω–∞–ª—ñ–∑ –≥–µ–Ω–µ—Ç–∏—á–Ω–∏—Ö –∫–æ–º–±—ñ–Ω–∞—Ü—ñ–π\n"
        "üìä –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –π–º–æ–≤—ñ—Ä–Ω–æ—Å—Ç—ñ –ø–µ—Ä–µ–¥–∞—á—ñ –æ–∑–Ω–∞–∫\n"
        "üå± –î–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è –≥–µ–Ω–µ—Ç–∏—á–Ω–∏—Ö –≤–∞—Ä—ñ–∞—Ü—ñ–π\n\n"
        "–ö–æ–º–∞–Ω–¥–∏ –¥–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏:\n"
        "\t\t\t=> /help - —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞\n"
        "\t\t\t=> /about - –¥—ñ–∑–Ω–∞–π—Ç–µ—Å—å –±—ñ–ª—å—à–µ –ø—Ä–æ —Ä–æ–±–æ—Ç—É –±–æ—Ç–∞"
    ))


@user_private_router.message(Command("help"))
async def command_help_handler(message: Message):
    stickers = os.path.join('assets', 'stickers', 'owo.webp')

    await message.answer_sticker(sticker=FSInputFile(stickers), emoji="üëÄ")
    await message.answer(text=(
        "üìã –û—Å—å –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –±–æ—Ç–æ–º:\n\n"
        "üí° /about - –¥–æ–∫–ª–∞–¥–Ω—ñ—à–µ –ø—Ä–æ –±–æ—Ç–∞\n"
        "üìù /survey - –∑–∞–ø—É—Å–∫ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –≥–ª–∏–±—à–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É\n"
        "üìú /history - –ø–µ—Ä–µ–≥–ª—è–¥ —ñ—Å—Ç–æ—Ä—ñ—ó –≤–∞—à–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤"
    ))


@user_private_router.message(Command("about"))
async def command_about_handler(message: Message):
    photo = os.path.join('assets', 'image', 'photo_2024-10-18_16-02-20.jpg')

    await message.answer_photo(
    photo=FSInputFile(photo),
    caption=(
        "üëã –ü—Ä–∏–≤—ñ—Ç! –†–∞–¥—ñ –≤—ñ—Ç–∞—Ç–∏ —Ç–µ–±–µ –≤ –±–æ—Ç—ñ, —è–∫–∏–π –¥–æ–ø–æ–º–æ–∂–µ –∑–∞–≥–ª–∏–±–∏—Ç–∏—Å—å —É —Å–≤—ñ—Ç –≥–µ–Ω–µ—Ç–∏–∫–∏ üß¨. "
        "–ù–∞—à –±–æ—Ç –∑–¥–∞—Ç–Ω–∏–π –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ —Ä—ñ–∑–Ω—ñ –≥–µ–Ω–µ—Ç–∏—á–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è —Ç–∞ –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Ç–≤–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ, "
        "—â–æ–± –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –º–æ–∂–ª–∏–≤—ñ –≥–µ–Ω–æ—Ç–∏–ø–∏ üßë‚Äçüî¨ —ñ –ø–µ—Ä–µ–¥–±–∞—á–∏—Ç–∏ –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—á—ñ —Å–ø–∞–¥–∫–æ–≤–∏—Ö –æ–∑–Ω–∞–∫ üå±.\n\n\t\t\t"
        "–ó–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Ç–∞–±–ª–∏—Ü—ñ –ü–µ–Ω–Ω–µ—Ç–∞ üìä —Ç–∏ –¥—ñ–∑–Ω–∞—î—à—Å—è, —è–∫ –ø–µ–≤–Ω—ñ –æ–∑–Ω–∞–∫–∏ –º–æ–∂—É—Ç—å –ø—Ä–æ—è–≤–∏—Ç–∏—Å—è "
        "—É —Ç–≤–æ—ó—Ö –º–∞–π–±—É—Ç–Ω—ñ—Ö –Ω–∞—â–∞–¥–∫—ñ–≤ ü§±. –¶–µ —ñ–¥–µ–∞–ª—å–Ω–∞ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –Ω–µ –ª–∏—à–µ —Ä–æ–∑—ñ–±—Ä–∞—Ç–∏—Å—è –≤ —Å–≤–æ—ó–π –≥–µ–Ω–µ—Ç–∏—Ü—ñ, "
        "–∞–ª–µ –π –ø–æ–≥–ª–∏–±–∏—Ç–∏ —Å–≤–æ—ó –∑–Ω–∞–Ω–Ω—è –ø—Ä–æ –æ—Å–Ω–æ–≤–∏ —Å–ø–∞–¥–∫–æ–≤–æ—Å—Ç—ñ üß†."
        "\n\n\t\t\t<strong>–ù–∞—Ç–∏—Å–∫–∞–π => /survey</strong> - —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ –ø—Ä–æ —Å–≤–æ—ó —Å–ø–∞–¥–∫–æ–≤—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ! "
        "–ë–æ—Ç –∑–∞–¥–∞—Å—Ç—å –∫—ñ–ª—å–∫–∞ –ø—Ä–æ—Å—Ç–∏—Ö –∑–∞–ø–∏—Ç–∞–Ω—å, –∞ —Ç–∏ –æ—Ç—Ä–∏–º–∞—î—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É –≤–∏–≥–ª—è–¥—ñ –≥–µ–Ω–µ—Ç–∏—á–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑—É üîÆ."
        )
    )


@user_private_router.message(Command("history"))
async def detailed_survey(message: Message):
    photo = os.path.join('assets', 'image', 'photo_2024-10-26_13-10-32.jpg')
    await message.answer_photo(photo=FSInputFile(photo), caption="–†–µ–∑—É–ª—å–∞—Ç–∞ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è N[num_result]: –ß–æ–ª–æ–≤—ñ—á–∏–π –≥–µ–Ω–æ—Ç–∏–ø: N; \n"
                 "–ñ—ñ–Ω–æ—á–∏–π –≥–µ–Ω–æ—Ç–∏–ø: N; \n"
                 "–î–∏—Ç—è—á—ñ –≥–µ–Ω–æ—Ç–∏–ø–∏: N; \n"
                 "–í—ñ–¥—Å–æ—Ç–∫–∏: N;",
                 reply_markup=get_callback_btns(btns={
                     "–ù–∞–∑–∞–¥": "back",
                     "–î–∞–ª—ñ": "next",
                 }))


@user_private_router.message(StateFilter(None), or_f(Command("survey"), (F.text.lower() == "–æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è")))
async def command_start_handler(message: Message, state: FSMContext):
    image = os.path.join('assets', 'image', 'photo_2024-10-16_08-56-42.jpg')

    await state.set_state(MessageState.quest_1)
    await state.update_data(quests={
        "start_quest": {
            "result_quest1": None,
            "result_quest2": None,
            "result_quest3": None
        },
        "gen": {
            1: None,
            2: None
        }
    })

    await message.answer_photo(photo=FSInputFile(image), caption="–ó–∞ —è–∫–∏–º–∏ –æ–∑–Ω–∞–∫–∞–º–∏ –≤–∏ —Ö–æ—Ç—ñ–ª –±–∏ —Ä–æ–∑–ø–æ—á–∞—Ç–∏?",
                                            reply_markup=get_callback_btns(btns={
                                                "–ö–æ–ª—ñ—Ä –æ—á–µ–π": "type_of_color_eye",
                                                "–ì—Ä—É–ø–∞ –∫—Ä–æ–≤—ñ": "type_of_blood",
                                                "–ù–∞–∑–∞–¥": "return",
                                                "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏": "cancel",
                                            }))


## Handlers —è–∫—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ –∑–∞ "–ù–∞–∑–∞–¥" —Ç–∞ "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏"
@user_private_router.callback_query(StateFilter("*"), F.data.startswith("cancel"))
async def cancel_handler(callback: types.CallbackQuery, state: FSMContext) -> None:
    curent_state = await state.get_state()
    if curent_state is None:
        return

    await state.clear()
    await callback.message.answer("–û–ø–∏—Ç—É–≤–∞–Ω–Ω—è –±—É–ª–∞ –≤—ñ–¥–º—ñ–Ω–µ–Ω–æ")


@user_private_router.callback_query(StateFilter("*"), F.data.startswith("return"))
async def back_step_handler(callback: types.CallbackQuery, state: FSMContext) -> None:
    current_state = await state.get_state()
    user_data = await state.get_data()
    quests = user_data.get('quests', {})

    if current_state == MessageState.quest_1:
        sticker = os.path.join('assets', 'image', 'svabodin.webm')
        await callback.message.answer_sticker(sticker=FSInputFile(sticker), emoji="ü§¨")
        await callback.message.answer("–ê –≤—Å–µ! –ù–µ–º–∞ –∫—É–¥–∏ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏—Å—è, –∞–Ω–ª–∞–∫ –±—Ä–æ", reply_markup=types.ReplyKeyboardRemove())
        await state.clear()
        return

    previous_question = quests['start_quest'].get('result_quest1', None)

    await callback.message.answer("–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è. –ó–∞—á–µ–∫–∞–π—Ç–µ –ø–æ–∫–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å—Å—è –ø–∏—Ç–∞–Ω–Ω—è")

    if previous_question == 'type_of_color_eye':
        if current_state == MessageState.quest_2.state:
            await command_start_handler(callback.message, state)

        elif current_state == MessageState.quest_3.state:
            await first_quest_eye(callback, state)

        elif current_state == MessageState.analis_answer.state:
            await second_quest_kari(callback, state)

    elif previous_question == 'type_of_blood':
        if current_state == MessageState.quest_2.state:
            await command_start_handler(callback.message, state)

        elif current_state == MessageState.quest_3:
            await first_survey_blood(callback, state),
        
    previous = None
    for step in MessageState.__all_states__:
        if step.state == current_state:
            await state.set_state(previous)
            return

        previous = step

genotypes = []

## –í—Å–µ –ø—Ä–æ –æ—á–∏
@user_private_router.callback_query(MessageState.quest_1, F.data.startswith('type_of_color_eye'))
async def first_quest_eye(callback: types.CallbackQuery, state: FSMContext):
    gif = os.path.join('assets', 'image', '–∞–ª–ª–∞—Ö-—Ö–∞–ª—è–ª—å.gif')

    await state.set_state(MessageState.quest_2)

    user_data = await state.get_data()
    quests = user_data['quests']
    quests['start_quest']['result_quest1'] = callback.data

    await state.update_data(quests=quests)
    await callback.message.answer_animation(animation=FSInputFile(gif),
                                                reply_markup=get_callback_btns(btns={
                                                    "–ë–ª–∞–∫–∏—Ç–Ω—ñ": "blue",
                                                    "–ö–∞—Ä—ñ": "kari",
                                                    "–ó–µ–ª–µ–Ω–æ/–°–≤—ñ—Ç–ª–æ –∫–∞—Ä—ñ": "green/light_brown",
                                                    "–ù–∞–∑–∞–¥": "return",
                                                    "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏": "cancel"
                                                }, sizes=(2,1,2)))
    

## –í—Å–µ –ø—Ä–æ –∫–∞—Ä—ñ–π
@user_private_router.callback_query(MessageState.quest_2, F.data.startswith('kari'))
async def second_quest_kari(callback: types.CallbackQuery, state: FSMContext):
    image = os.path.join('assets', 'image', 'furry-—Ñ—ç–Ω–¥–æ–º—ã-furry-m-8352840.jpeg')

    await state.set_state(MessageState.quest_3)

    user_data = await state.get_data()
    quests = user_data['quests']
    quests['start_quest']['result_quest2'] = callback.data

    await state.update_data(quests=quests)
    await callback.message.answer_photo(photo=FSInputFile(image),
                                            caption="–ß–∏ –±—É–ª–∏ –≤ –æ–¥–Ω–æ–≥–æ –∑ –±–∞—Ç—å–∫—ñ–≤, –±—Ä–∞—Ç—ñ–≤/—Å–µ—Å—Ç–µ—Ä –±–ª–∞–∫–∏—Ç–Ω—ñ –æ—á—ñ?",
                                            reply_markup=get_callback_btns(btns={
                                                "–¢–∞–∫": "final_yes_kari",
                                                "–ù—ñ": "final_no_kari",
                                                "–ù–∞–∑–∞–¥": "return",
                                                "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏": "cancel"
                                            }))
    

@user_private_router.callback_query(MessageState.quest_3, F.data.startswith('final_yes_kari'))
async def analis_answer_yes(callback: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()

    await state.set_state(MessageState.analis_answer)

    quests = user_data['quests']
    quests['start_quest']['result_quest3'] = "[–¢–∞–∫]:"
    quests['gen'] = "[Aa]"

    await state.update_data(quests=quests)

    user_data = await state.get_data()
    genotypes.append(user_data['quests']['gen'])


@user_private_router.callback_query(MessageState.quest_3, F.data.startswith('final_no_kari'))
async def analis_answer_no(callback: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()

    await state.set_state(MessageState.analis_answer)

    quests = user_data['quests']
    quests['start_quest']['result_quest3'] = "[–ù—ñ]:"
    quests['gen'] = "[AA]"

    await state.update_data(quests=quests)

    user_data = await state.get_data()
    genotypes.append(user_data['quests']['gen'])
    

## –í—Å–µ –ø—Ä–æ –±–ª–∞–∫–∏—Ç–Ω–∏–π
@user_private_router.callback_query(MessageState.quest_2, F.data.startswith('blue'))
async def analis_answer_blue(callback: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()

    quests = user_data['quests']
    quests['start_quest']['result_quest2'] = callback.data
    quests['gen'] = "[aa]"

    await state.update_data(quests=quests)

    user_data = await state.get_data()
    genotypes.append(user_data['quests']['gen'])

    
## –í—Å–µ –ø—Ä–æ —Å–≤—ñ—Ç–ª–æ –∑–µ–ª–µ–Ω–æ –±–ª–∞–∫–∏—Ç–Ω–∏–π
@user_private_router.callback_query(MessageState.quest_2, F.data.startswith('green/light_brown'))
async def analis_answer_green_light_brown(callback: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()

    quests = user_data['quests']
    quests['start_quest']['result_quest2'] = "[–∑–µ–ª–µ–Ω–æ-–±–ª–∞–∫–∏—Ç–Ω—ñ]:"
    quests['gen'] = "[Aa]"

    await state.update_data(quests=quests)

    user_data = await state.get_data()
    genotypes.append(user_data['quests']['gen'])

    
## –í—Å–µ –ø—Ä–æ –≥—Ä—É–ø—É –∫—Ä–æ–≤—ñ
@user_private_router.callback_query(MessageState.quest_1, F.data.startswith('type_of_blood'))
async def first_survey_blood(callback: types.CallbackQuery, state: FSMContext):
    image = os.path.join('assets', 'image', 'photo_2024-10-19_10-02-38.jpg')

    await state.set_state(MessageState.quest_2)

    user_data = await state.get_data()
    quests = user_data['quests']
    quests['start_quest']['result_quest1'] = callback.data
    
    await state.update_data(quests=quests)

    await callback.message.answer_photo(photo=FSInputFile(image), caption="–Ø–∫–∞ –≤–∞—à–∞ –≥—Ä—É–ø–∞ –∫—Ä–æ–≤—ñ?",
                                            reply_markup=get_callback_btns(btns={
                                                "I(O)": "first_blood",
                                                "II(A)": "second_blood",
                                                "III(B)": "third_blood",
                                                "IV(AB)": "fourth_blood",
                                                "–ù–∞–∑–∞–¥": "return",
                                                "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏": "cancel",
                                            }, sizes=(3,1,2)))
    

## –ü–µ—Ä—à–∞ –≥—Ä—É–ø–∞ –∫—Ä–æ–≤—ñ
@user_private_router.callback_query(MessageState.quest_2, F.data.startswith("first_blood"))
async def first_quest(callback: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()

    quests = user_data['quests']
    quests['start_quest']['result_quest2'] = "I(O)"
    quests['gen'] = "[OO]"

    await state.update_data(quests=quests)

    user_data = await state.get_data()
    genotypes.append(user_data['quests']['gen'])

    


## –î—Ä—É–≥–∞ –≥—Ä—É–ø–∞ –∫—Ä–æ–≤—ñ
@user_private_router.callback_query(MessageState.quest_2, F.data.startswith("second_blood"))
async def first_quest(callback: types.CallbackQuery, state: FSMContext):
    video = os.path.join('assets/video', '—ç–ø–∏–∫ —Ñ–µ–π–ª.mp4')

    await state.set_state(MessageState.quest_3)

    user_data = await state.get_data()
    quests = user_data['quests']
    quests['start_quest']['result_quest2'] = callback.data

    await state.update_data(quests=quests)
    await callback.message.answer_video(video=FSInputFile(video),
                                            caption="–ß–∏ –±—É–ª–∞ –≤ –æ–¥–Ω–æ–≥–æ –∑ –±–∞—Ç—å–∫—ñ–≤, –±—Ä–∞—Ç—ñ–≤\—Å–µ—Å—Ç–µ—Ä I(–û) –≥—Ä—É–ø–∞ –∫—Ä–æ–≤—ñ?",
                                            reply_markup=get_callback_btns(btns={
                                                "–¢–∞–∫": "final_yes_blood",
                                                "–ù—ñ": "final_no_blood",
                                                "–ù–∞–∑–∞–¥": "return",
                                                "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏": "cancel",                                                
                                            }))
    

@user_private_router.callback_query(MessageState.quest_3, F.data.startswith('final_yes_blood'))
async def analis_answer(callback: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()

    await state.set_state(MessageState.analis_answer)

    quests = user_data['quests']
    quests['start_quest']['result_quest3'] = "[–¢–∞–∫]:"
    quests['gen1'] = "[AO]"

    await state.update_data(quests=quests)

    user_data = await state.get_data()
    genotypes.append(user_data['quests']['gen'])

    


@user_private_router.callback_query(MessageState.quest_3, F.data.startswith('final_no_blood'))
async def analis_answer_no(callback: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()

    await state.set_state(analis_answer)

    quests = user_data['quests']
    quests['start_quest']['result_quest3'] = "[–ù—ñ]:"
    quests['gen'] = "[AA]"

    await state.update_data(quests=quests)

    user_data = await state.get_data()
    genotypes.append(user_data['quests']['gen'])

    


## –¢–µ—Ä—Ç—å—Å—è –≥—Ä—É–ø–∞ –∫—Ä–æ–≤—ñ
@user_private_router.callback_query(MessageState.quest_2, F.data.startswith("third_blood"))
async def first_quest(callback: types.CallbackQuery, state: FSMContext):
    image =  os.path.join('assets', 'image', 'wqdasd.jpg')

    await state.set_state(MessageState.quest_3)

    user_data = await state.get_data()
    quests = user_data['quests']
    quests['start_quest']['result_quest2'] = callback.data
    
    await state.update_data(quests=quests)

    await callback.message.answer_photo(photo=FSInputFile(image),
                                            caption="–ß–∏ –±—É–ª–∞ –≤ –æ–¥–Ω–æ–≥–æ –∑ –±–∞—Ç—å–∫—ñ–≤, –±—Ä–∞—Ç—ñ–≤\—Å–µ—Å—Ç–µ—Ä I(–û) –≥—Ä—É–ø–∞ –∫—Ä–æ–≤—ñ?",
                                            reply_markup=get_callback_btns(btns={
                                                "–¢–∞–∫": "final_yes_blood",
                                                "–ù—ñ": "final_no_blood",
                                                "–ù–∞–∑–∞–¥": "return",
                                                "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏": "cancel",                                                
                                            }))
    

@user_private_router.callback_query(MessageState.quest_3, F.data.startswith('final_yes_blood'))
async def analis_answer(callback: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()

    await state.set_state(MessageState.analis_answer)

    quests = user_data['quests']
    quests['start_quest']['result_quest3'] = "[–¢–∞–∫]:"
    quests['gen'] = "[BO]"

    await state.update_data(quests=quests)

    user_data = await state.get_data()
    genotypes.append(user_data['quests']['gen'])

    


@user_private_router.callback_query(MessageState.quest_3, F.data.startswith('final_no_blood'))
async def analis_answer_no(callback: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()

    await state.set_state(MessageState.analis_answer)

    quests = user_data['quests']
    quests['start_quest']['result_quest3'] = "[–ù—ñ]:"
    quests['gen'] = "[BB]"

    await state.update_data(quests=quests)

    user_data = await state.get_data()
    genotypes.append(user_data['quests']['gen'])

    
## –ß–µ—Ç–≤–µ—Ä—Ç–∞ –≥—Ä—É–ø–∞ –∫—Ä–æ–≤—ñ
@user_private_router.callback_query(MessageState.quest_2, F.data.startswith("fourth_blood"))
async def first_quest(callback: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()

    quests = user_data['quests']
    quests['start_quest']['result_quest2'] = "[IV(AB)]:"
    quests['gen'] = "[AB]"

    await state.update_data(quests=quests)

    user_data = await state.get_data()
    genotypes.append(user_data['quests']['gen'])

    
