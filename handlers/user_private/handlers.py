from aiogram import types, F
import os

from aiogram.fsm.context import FSMContext
from aiogram.filters import CommandStart, Command, or_f, StateFilter
from aiogram.types import Message, FSInputFile

from keyboard.InlineKeyboard import get_callback_btns
from service.analysis_data import Punnett_table
from .MessageState import Message_State
from .router import user_private_router

@user_private_router.message(or_f(Command("help", "start"), CommandStart(deep_link=True)))
async def command_help_handler(message: Message):
    stickers = os.path.join('assets', 'image', 'hi.webp')

    await message.answer_sticker(sticker=FSInputFile(stickers), emoji="üëã")
    await message.answer(text=(
        "üëã –ü—Ä–∏–≤—ñ—Ç! –¶–µ–π –±–æ—Ç –¥–æ–ø–æ–º–æ–∂–µ –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –≥–µ–Ω–µ—Ç–∏—á–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è üß¨, "
        "–∑–æ–∫—Ä–µ–º–∞ –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –º–æ–∂–ª–∏–≤—ñ –≥–µ–Ω–æ—Ç–∏–ø–∏ —Ç–∞ –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—á—ñ –æ–∑–Ω–∞–∫ "
        "–Ω–∞—â–∞–¥–∫–∞–º üå± –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Ç–∞–±–ª–∏—Ü—ñ –ü–µ–Ω–Ω–µ—Ç–∞ üìä.\n\n"
        "–î—ñ–∑–Ω–∞–≤–∞–π—Å—è –±—ñ–ª—å—à–µ –ø—Ä–æ –≥–µ–Ω–µ—Ç–∏–∫—É —ñ —Å–≤–æ—ó —Å–ø–∞–¥–∫–æ–≤—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –∑–∞–≤–¥—è–∫–∏ —Ü—ñ–º –∫–æ–º–∞–Ω–¥–∞–º:\n"
        "\t\t\t=> /about - –¥–æ–∫–ª–∞–¥–Ω—ñ—à–µ –ø—Ä–æ –±–æ—Ç–∞\n"
        "\t\t\t=> /survey - –∑–∞–ø—É—Å–∫–∞—î –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è\n"
        "\t\t\t=> /history - —ñ—Å—Ç–æ—Ä—ñ—è –≤–∞—à–∏—Ö –ø–æ–¥—ñ–π"
    ))


@user_private_router.message(Command("about"))
async def command_about_handler(message: Message):
    photo = os.path.join('assets', 'image', 'photo_2024-10-18_16-02-20.jpg')

    await message.answer_photo(
    photo=FSInputFile(photo), 
    caption=(
        "üëã –ü—Ä–∏–≤—ñ—Ç! –†–∞–¥—ñ –≤—ñ—Ç–∞—Ç–∏ —Ç–µ–±–µ –≤ –±–æ—Ç—ñ, —è–∫–∏–π –¥–æ–ø–æ–º–æ–∂–µ –∑–∞–≥–ª–∏–±–∏—Ç–∏—Å—å —É —Å–≤—ñ—Ç –≥–µ–Ω–µ—Ç–∏–∫–∏ üß¨. "
        "–ù–∞—à –±–æ—Ç –∑–¥–∞—Ç–Ω–∏–π –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ —Ä—ñ–∑–Ω—ñ –≥–µ–Ω–µ—Ç–∏—á–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è —Ç–∞ –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Ç–≤–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ, "
        "—â–æ–± –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –º–æ–∂–ª–∏–≤—ñ –≥–µ–Ω–æ—Ç–∏–ø–∏ üßë‚Äçüî¨ —ñ –ø–µ—Ä–µ–¥–±–∞—á–∏—Ç–∏ –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—á—ñ —Å–ø–∞–¥–∫–æ–≤–∏—Ö –æ–∑–Ω–∞–∫ üå±.\n\n\t\t\t"
        "–ó–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Ç–∞–±–ª–∏—Ü—ñ –ü–µ–Ω–Ω–µ—Ç–∞ üìä —Ç–∏ –¥—ñ–∑–Ω–∞—î—à—Å—è, —è–∫ –ø–µ–≤–Ω—ñ –æ–∑–Ω–∞–∫–∏ –º–æ–∂—É—Ç—å –ø—Ä–æ—è–≤–∏—Ç–∏—Å—è "
        "—É —Ç–≤–æ—ó—Ö –º–∞–π–±—É—Ç–Ω—ñ—Ö –Ω–∞—â–∞–¥–∫—ñ–≤ ü§±. –¶–µ —ñ–¥–µ–∞–ª—å–Ω–∞ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –Ω–µ –ª–∏—à–µ —Ä–æ–∑—ñ–±—Ä–∞—Ç–∏—Å—è –≤ —Å–≤–æ—ó–π –≥–µ–Ω–µ—Ç–∏—Ü—ñ, "
        "–∞–ª–µ –π –ø–æ–≥–ª–∏–±–∏—Ç–∏ —Å–≤–æ—ó –∑–Ω–∞–Ω–Ω—è –ø—Ä–æ –æ—Å–Ω–æ–≤–∏ —Å–ø–∞–¥–∫–æ–≤–æ—Å—Ç—ñ üß†."
        "\n\n\t\t\t<strong>–ù–∞—Ç–∏—Å–∫–∞–π => /survey</strong> - —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ –ø—Ä–æ —Å–≤–æ—ó —Å–ø–∞–¥–∫–æ–≤—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ! "
        "–ë–æ—Ç –∑–∞–¥–∞—Å—Ç—å –∫—ñ–ª—å–∫–∞ –ø—Ä–æ—Å—Ç–∏—Ö –∑–∞–ø–∏—Ç–∞–Ω—å, –∞ —Ç–∏ –æ—Ç—Ä–∏–º–∞—î—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É –≤–∏–≥–ª—è–¥—ñ –≥–µ–Ω–µ—Ç–∏—á–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑—É üîÆ."
        )
    )


@user_private_router.message(F.text.lower() == "—Ç–∏ –±–∞—á–∏—à—å –º–µ–Ω–µ?")
async def see_me(message: Message):
    video = os.path.join('assets', 'video', 'ssstik.io_@yuipaws_1728557809636.mp4')
    await message.answer_video(video=FSInputFile(video))


@user_private_router.message(StateFilter(None), or_f(Command("survey"), (F.text.lower() == "–æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è")))
async def command_start_handler(message: Message, state: FSMContext):
    image = os.path.join('assets', 'image', 'photo_2024-10-16_08-56-42.jpg')

    await state.set_state(Message_State.quest_1)
    await state.update_data(quests={
        "start_quest": {
            "result_quest1": None,
            "result_quest2": None,
            "result_quest3": None
        },
        "gen": None
    })
    await message.answer_photo(photo=FSInputFile(image), caption="–ó–∞ —è–∫–∏–º–∏ –æ–∑–Ω–∞–∫–∞–º–∏ –≤–∏ —Ö–æ—Ç—ñ–ª –±–∏ —Ä–æ–∑–ø–æ—á–∞—Ç–∏?",
                                            reply_markup=get_callback_btns(btns={
                                                "–ö–æ–ª—ñ—Ä –æ—á–µ–π": "type_of_color_eye",
                                                "–ì—Ä—É–ø–∞ –∫—Ä–æ–≤—ñ": "type_of_blood",
                                            }))


@user_private_router.callback_query(F.text.lower() == "–¥–æ—Å—Ç—É–ø–Ω–æ")
async def detailed_survey(callback: types.CallbackQuery):
    video = os.path.join('assets', 'video', 'RPReplay_Final1705860476.mp4')
    await callback.message.answer_video(video=FSInputFile(video), caption="–û–π –æ–π –æ–π –∞ —Ü–µ —â–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ, —Å–æ—Å–∏ –±—ñ–±—É")


## –í—Å–µ –ø—Ä–æ –æ—á–∏
@user_private_router.callback_query(Message_State.quest_1, F.data.startswith('type_of_color_eye'))
async def first_quest(callback: types.CallbackQuery, state: FSMContext):
    gif = os.path.join('assets', 'image', '–∞–ª–ª–∞—Ö-—Ö–∞–ª—è–ª—å.gif')

    await state.set_state(Message_State.quest_2)
    
    user_data = await state.get_data()
    quests = user_data['quests']
    quests['start_quest']['result_quest1'] = callback.data

    await state.update_data(quests=quests)

    await callback.message.answer_animation(animation=FSInputFile(gif),
                                                reply_markup=get_callback_btns(btns={
                                                    "–ë–ª–∞–∫–∏—Ç–Ω—ñ": "blue",
                                                    "–ö–∞—Ä—ñ": "kari",
                                                    "–ó–µ–ª–µ–Ω–æ/–°–≤—ñ—Ç–ª–æ –∫–∞—Ä—ñ": "green/light_brown",
                                                }))
        
        
## –í—Å–µ –ø—Ä–æ –∫–∞—Ä—ñ–π
@user_private_router.callback_query(Message_State.quest_2, F.data.startswith('kari'))
async def second_quest(callback: types.CallbackQuery, state: FSMContext):
    image = os.path.join('assets', 'image', 'furry-—Ñ—ç–Ω–¥–æ–º—ã-furry-m-8352840.jpeg')

    await state.set_state(Message_State.analis_answer)

    user_data = await state.get_data()
    quests = user_data['quests']
    quests['start_quest']['result_quest2'] = callback.data

    await state.update_data(quests=quests)

    await callback.message.answer_photo(photo=FSInputFile(image),
                                            caption="–ß–∏ –±—É–ª–∏ –≤ –æ–¥–Ω–æ –∑ –±–∞—Ç—å–∫–≤—ñ, –±—Ä–∞—Ç—ñ–≤/—Å–µ—Å—Ç–µ—Ä –±–ª–∞–∫–∏—Ç–Ω—ñ –æ—á—ñ?",
                                            reply_markup=get_callback_btns(btns={
                                                "–¢–∞–∫": "final_yes_kari",
                                                "–ù—ñ": "final_no_kari",
                                            }))


@user_private_router.callback_query(Message_State.analis_answer, F.data.startswith('final_yes_kari'))
async def analis_answer(callback: types.CallbackQuery, state: FSMContext):

    user_data = await state.get_data()
    quests = user_data['quests']
    quests['start_quest']['result_quest3'] = "[–¢–∞–∫]:"
    quests['gen'] = "[Aa,aa]"

    await state.update_data(quests=quests)

    await state.clear()
        

@user_private_router.callback_query(Message_State.analis_answer, F.data.startswith('final_no_kari'))
async def analis_answer_no(callback: types.CallbackQuery, state: FSMContext):

    user_data = await state.get_data()
    quests = user_data['quests']
    quests['start_quest']['result_quest3'] = "[–ù—ñ]:"
    quests['gen'] = "[AA,Aa]"

    await state.update_data(quests=quests)
           
    await state.clear()


## –í—Å–µ –ø—Ä–æ –±–ª–∞–∫–∏—Ç–Ω–∏–π
@user_private_router.callback_query(Message_State.quest_2, F.data.startswith('blue'))
async def analis_answer_blue(callback: types.CallbackQuery, state: FSMContext):

    user_data = await state.get_data()
    quests = user_data['quests']

    quests['start_quest']['result_quest2'] = "[–ë–ª–∞–∫–∏—Ç–Ω—ñ]:"
    quests['gen'] = ['aa', 'aA']

    await state.update_data(quests=quests)

    user_data = await state.get_data()
    genotypes = user_data['quests']['gen']

    await Punnett_table(callback, genotypes)

    await state.clear()


## –í—Å–µ –ø—Ä–æ —Å–≤—ñ—Ç–ª–æ –∑–µ–ª–µ–Ω–æ –±–ª–∞–∫–∏—Ç–Ω–∏–π
@user_private_router.callback_query(Message_State.quest_2, F.data.startswith('green/light_brown'))
async def analis_answer_green_light_brown(callback: types.CallbackQuery, state: FSMContext):

    user_data = await state.get_data()
    quests = user_data['quests']
    quests['start_quest']['result_quest2'] = "[–∑–µ–ª–µ–Ω–æ-–±–ª–∞–∫–∏—Ç–Ω—ñ]:"
    quests['gen'] = "[AA,aa]"

    await state.update_data(quests=quests)

    await state.clear()


## –í—Å–µ –ø—Ä–æ –≥—Ä—É–ø—É –∫—Ä–æ–≤—ñ
@user_private_router.callback_query(Message_State.quest_1, F.data.startswith('type_of_blood'))
async def eaysy_survey(callback: types.CallbackQuery, state: FSMContext):
    image = os.path.join('assets', 'image', 'photo_2024-10-19_10-02-38.jpg')

    await state.set_state(Message_State.quest_2)
    
    user_data = await state.get_data()
    quests = user_data['quests']
    quests['start_quest']['result_quest1'] = callback.data

    await state.update_data(quests=quests)
    
    await callback.message.answer_photo(photo=FSInputFile(image), caption="–Ø–∫–∞ –≤–∞—à–∞ –≥—Ä—É–ø–∞ –∫—Ä–æ–≤—ñ?",
                                            reply_markup=get_callback_btns(btns={
                                                "I(O)": "first_blood",
                                                "II(A)": "second_blood",
                                                "III(B)": "third_blood",
                                                "IV(AB)": "fourth_blood",
                                            }))


## –ü–µ—Ä—à–∞ –≥—Ä—É–ø–∞ –∫—Ä–æ–≤—ñ
@user_private_router.callback_query(Message_State.quest_2, F.data.startswith("first_blood"))
async def first_quest(callback: types.CallbackQuery, state: FSMContext):
    # gif = os.path.join('assets', 'image', 'komaru-–∫–æ–º–∞—Ä—É.gif')

    user_data = await state.get_data()
    quests = user_data['quests']
    quests['start_quest']['result_quest2'] = "I(O)"
    quests['gen'] = "[OO,Aa]"

    await state.update_data(quests=quests)

    await state.clear()


## –î—Ä—É–≥–∞ –≥—Ä—É–ø–∞ –∫—Ä–æ–≤—ñ
@user_private_router.callback_query(Message_State.quest_2, F.data.startswith("second_blood"))
async def first_quest(callback: types.CallbackQuery, state: FSMContext):
    video = os.path.join('assets/video', '—ç–ø–∏–∫ —Ñ–µ–π–ª.mp4')

    await state.set_state(Message_State.analis_answer)

    user_data = await state.get_data()
    quests = user_data['quests']
    quests['start_quest']['result_quest2'] = callback.data

    await state.update_data(quests=quests)

    await callback.message.answer_video(video=FSInputFile(video),
                                            caption="–ß–∏ –±—É–ª–∞ –≤ –æ–¥–Ω–æ–≥–æ –∑ –±–∞—Ç—å–∫—ñ–≤, –±—Ä–∞—Ç—ñ–≤\—Å–µ—Å—Ç–µ—Ä I(–û) –≥—Ä—É–ø–∞ –∫—Ä–æ–≤—ñ?",
                                            reply_markup=get_callback_btns(btns={
                                                "–¢–∞–∫": "final_yes_blood",
                                                "–ù—ñ": "final_no_blood",
                                            }))


@user_private_router.callback_query(Message_State.analis_answer, F.data.startswith('final_yes_blood'))
async def analis_answer(callback: types.CallbackQuery, state: FSMContext):

    user_data = await state.get_data()
    quests = user_data['quests']
    quests['start_quest']['result_quest3'] = "[–¢–∞–∫]:"
    quests['gen'] = "[AO,aa]"

    await state.update_data(quests=quests)
   
    await state.clear()


@user_private_router.callback_query(Message_State.analis_answer, F.data.startswith('final_no_blood'))
async def analis_answer_no(callback: types.CallbackQuery, state: FSMContext):

    user_data = await state.get_data()
    quests = user_data['quests']
    quests['start_quest']['result_quest3'] = "[–ù—ñ]:"
    quests['gen'] = "[AA,aA]"

    await state.update_data(quests=quests)

    await state.clear()


## –¢–µ—Ä—Ç—å—Å—è –≥—Ä—É–ø–∞ –∫—Ä–æ–≤—ñ
@user_private_router.callback_query(Message_State.quest_2, F.data.startswith("third_blood"))
async def first_quest(callback: types.CallbackQuery, state: FSMContext):
    image =  os.path.join('assets', 'image', 'wqdasd.jpg')

    await state.set_state(Message_State.analis_answer)

    user_data = await state.get_data()
    quests = user_data['quests']
    quests['start_quest']['result_quest2'] = callback.data

    await state.update_data(quests=quests)
    
    await callback.message.answer_photo(photo=FSInputFile(image),
                                            caption="–ß–∏ –±—É–ª–∞ –≤ –æ–¥–Ω–æ–≥–æ –∑ –±–∞—Ç—å–∫—ñ–≤, –±—Ä–∞—Ç—ñ–≤\—Å–µ—Å—Ç–µ—Ä I(–û) –≥—Ä—É–ø–∞ –∫—Ä–æ–≤—ñ?",
                                            reply_markup=get_callback_btns(btns={
                                                "–¢–∞–∫": "final_yes_blood",
                                                "–ù—ñ": "final_no_blood",
                                            }))


@user_private_router.callback_query(Message_State.analis_answer, F.data.startswith('final_yes_blood'))
async def analis_answer(callback: types.CallbackQuery, state: FSMContext):

    user_data = await state.get_data()
    quests = user_data['quests']
    quests['start_quest']['result_quest3'] = "[–¢–∞–∫]:"
    quests['gen'] = "[BB,OA]"

    await state.update_data(quests=quests)

    await state.clear()


@user_private_router.callback_query(Message_State.analis_answer, F.data.startswith('final_no_blood'))
async def analis_answer_no(callback: types.CallbackQuery, state: FSMContext):

    user_data = await state.get_data()
    quests = user_data['quests']
    quests['start_quest']['result_quest3'] = "[–ù—ñ]:"
    quests['gen'] = "[BO,AO]"

    await state.update_data(quests=quests)

    await state.clear()

## –ß–µ—Ç–≤–µ—Ä—Ç–∞ –≥—Ä—É–ø–∞ –∫—Ä–æ–≤—ñ
@user_private_router.callback_query(Message_State.quest_2, F.data.startswith("fourth_blood"))
async def first_quest(callback: types.CallbackQuery, state: FSMContext):
    # gif = os.path.join('assets', 'image', 'image0-156-1-1.gif')

    user_data = await state.get_data()
    quests = user_data['quests']
    quests['start_quest']['result_quest2'] = "[IV(AB)]:"
    quests['gen'] = "[AB,OO]"

    await state.update_data(quests=quests)
 
    await state.clear()


# print("Provekra 1")
# @user_private_router.message(Message_State.get_result)
# async def execute_table(message: types.Message, state: FSMContext):
#     print("Provekra 2")
#     male_genotype, children_genotypes, percentage, female_genotype = Punnett_table()
#     print("Provekra 3")
#     await message.answer(text=f"{male_genotype}; \n{female_genotype}; \n{children_genotypes}; \n{percentage}")
    
#     await state.clear()