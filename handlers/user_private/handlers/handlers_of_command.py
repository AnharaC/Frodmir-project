from aiogram import types, F
import logging
import os

from aiogram.fsm.context import FSMContext
from aiogram.filters import CommandStart, Command, or_f, StateFilter
from aiogram.types import Message, FSInputFile

from keyboard.InlineKeyboard import get_callback_btns
from service.survey_manager import get_survey_filename, get_survey_result

from .first_survey_handlers import *
from .second_survey_handlers import *
from .history_handler import *

from ..MessageState import MessageState
from ..router import user_private_router

from middleware.MessageMiddleware import UserMessageMiddleware
from middleware.CallbackMiddleware import CallbackMiddleware

user_private_router.message.middleware(UserMessageMiddleware())
user_private_router.callback_query.middleware(CallbackMiddleware())

logging.basicConfig(level=logging.INFO)

# Handler —â–æ –Ω–µ –±—É–¥–µ –¥–∞–≤–∞—Ç–∏ –≤–≤–æ–¥–∏—Ç–∏ –∫–æ–º–∞–Ω–¥–∏ –ø—ñ–¥ —á–∞—Å –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è
@user_private_router.message(
        StateFilter(MessageState.quest_1, MessageState.quest_2, MessageState.quest_3, MessageState.st_quest_2, MessageState.st_quest_3, MessageState.stage_1, MessageState.stage_2), 
        Command('help', 'start', 'about', 'survey', 'history'))
async def block_commands(message: Message, state: FSMContext):
    current_state = await state.get_state()
    gif = os.path.join('assets', 'image', 'bot eto da.webm')
    await message.answer_sticker(sticker=FSInputFile(gif), emoji="‚úã")
    await message.answer("–û–ø–∞, –∞ –Ω–∏–∑—è –Ω–∏–∑—è!! –î–æ–∫–∏ –Ω–µ —Å–∫–∞—Å—É–µ—à—å –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è, –∞–±–æ –Ω–µ –ø—Ä–æ–π–¥–µ—à—å –Ω–∏–∑—è –Ω–∏–∑—è")


## Handlers –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—á–∏ –∑–∞ start
@user_private_router.message(or_f(Command("start"), CommandStart(deep_link=True)))
async def command_start_handler(message: Message):
    stickers = os.path.join('assets', 'stickers', 'hi.webp')

    await message.answer_sticker(sticker=FSInputFile(stickers), emoji="üëã")
    await message.answer(text=(
        "üëã –ü—Ä–∏–≤—ñ—Ç! –¶–µ–π –±–æ—Ç –¥–æ–ø–æ–º–æ–∂–µ –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –≥–µ–Ω–µ—Ç–∏—á–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è üß¨. "
        "–í–∏ –∑–º–æ–∂–µ—Ç–µ –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –º–æ–∂–ª–∏–≤—ñ –≥–µ–Ω–æ—Ç–∏–ø–∏ —ñ –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—á—ñ –æ–∑–Ω–∞–∫ "
        "–Ω–∞—â–∞–¥–∫–∞–º üå± –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Ç–∞–±–ª–∏—Ü—ñ –ü–µ–Ω–Ω–µ—Ç–∞ üìä.\n\n"
        "–©–æ –≤–º—ñ—î —Ü–µ–π –±–æ—Ç:\n"
        "üß¨ –ê–Ω–∞–ª—ñ–∑ –≥–µ–Ω–µ—Ç–∏—á–Ω–∏—Ö –∫–æ–º–±—ñ–Ω–∞—Ü—ñ–π\n"
        "üìä –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –π–º–æ–≤—ñ—Ä–Ω–æ—Å—Ç—ñ –ø–µ—Ä–µ–¥–∞—á—ñ –æ–∑–Ω–∞–∫\n"
        "üå± –î–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è –≥–µ–Ω–µ—Ç–∏—á–Ω–∏—Ö –≤–∞—Ä—ñ–∞—Ü—ñ–π\n\n"
        "–ö–æ–º–∞–Ω–¥–∏ –¥–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏:\n"
        "\t\t\t=> /help - —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞\n"
        "\t\t\t=> /about - –¥—ñ–∑–Ω–∞–π—Ç–µ—Å—å –±—ñ–ª—å—à–µ –ø—Ä–æ —Ä–æ–±–æ—Ç—É –±–æ—Ç–∞"
    ))

## Handlers –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—á–∏ –∑–∞ help
@user_private_router.message(Command("help"))
async def command_help_handler(message: Message):
    stickers = os.path.join('assets', 'stickers', 'owo.webp')

    await message.answer_sticker(sticker=FSInputFile(stickers), emoji="üëÄ")
    await message.answer(text=(
        "üìã –û—Å—å –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –±–æ—Ç–æ–º:\n\n"
        "üí° /about - –¥–æ–∫–ª–∞–¥–Ω—ñ—à–µ –ø—Ä–æ –±–æ—Ç–∞\n"
        "üìù /survey - –∑–∞–ø—É—Å–∫ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –≥–ª–∏–±—à–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É\n"
        "üìú /history - –ø–µ—Ä–µ–≥–ª—è–¥ —ñ—Å—Ç–æ—Ä—ñ—ó –≤–∞—à–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤"
    ))

## Handlers –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—á–∏ –∑–∞ about
@user_private_router.message(Command("about"))
async def command_about_handler(message: Message):
    image = os.path.join('assets', 'image', 'photo_2024-10-18_16-02-20.jpg')

    await message.answer_photo(
    photo=FSInputFile(image),
    caption=(
        "üëã –ü—Ä–∏–≤—ñ—Ç! –†–∞–¥—ñ –≤—ñ—Ç–∞—Ç–∏ —Ç–µ–±–µ –≤ –±–æ—Ç—ñ, —è–∫–∏–π –¥–æ–ø–æ–º–æ–∂–µ –∑–∞–≥–ª–∏–±–∏—Ç–∏—Å—å —É —Å–≤—ñ—Ç –≥–µ–Ω–µ—Ç–∏–∫–∏ üß¨. "
        "–ù–∞—à –±–æ—Ç –∑–¥–∞—Ç–Ω–∏–π –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ —Ä—ñ–∑–Ω—ñ –≥–µ–Ω–µ—Ç–∏—á–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è —Ç–∞ –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Ç–≤–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ, "
        "—â–æ–± –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –º–æ–∂–ª–∏–≤—ñ –≥–µ–Ω–æ—Ç–∏–ø–∏ üßë‚Äçüî¨ —ñ –ø–µ—Ä–µ–¥–±–∞—á–∏—Ç–∏ –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—á—ñ —Å–ø–∞–¥–∫–æ–≤–∏—Ö –æ–∑–Ω–∞–∫ üå±.\n\n\t\t\t"
        "–ó–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Ç–∞–±–ª–∏—Ü—ñ –ü–µ–Ω–Ω–µ—Ç–∞ üìä —Ç–∏ –¥—ñ–∑–Ω–∞—î—à—Å—è, —è–∫ –ø–µ–≤–Ω—ñ –æ–∑–Ω–∞–∫–∏ –º–æ–∂—É—Ç—å –ø—Ä–æ—è–≤–∏—Ç–∏—Å—è "
        "—É —Ç–≤–æ—ó—Ö –º–∞–π–±—É—Ç–Ω—ñ—Ö –Ω–∞—â–∞–¥–∫—ñ–≤ ü§±. –¶–µ —ñ–¥–µ–∞–ª—å–Ω–∞ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –Ω–µ –ª–∏—à–µ —Ä–æ–∑—ñ–±—Ä–∞—Ç–∏—Å—è –≤ —Å–≤–æ—ó–π –≥–µ–Ω–µ—Ç–∏—Ü—ñ, "
        "–∞–ª–µ –π –ø–æ–≥–ª–∏–±–∏—Ç–∏ —Å–≤–æ—ó –∑–Ω–∞–Ω–Ω—è –ø—Ä–æ –æ—Å–Ω–æ–≤–∏ —Å–ø–∞–¥–∫–æ–≤–æ—Å—Ç—ñ üß†."
        "\n\n\t\t\t<strong>–ù–∞—Ç–∏—Å–∫–∞–π => /survey</strong> - —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ –ø—Ä–æ —Å–≤–æ—ó —Å–ø–∞–¥–∫–æ–≤—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ! "
        "–ë–æ—Ç –∑–∞–¥–∞—Å—Ç—å –∫—ñ–ª—å–∫–∞ –ø—Ä–æ—Å—Ç–∏—Ö –∑–∞–ø–∏—Ç–∞–Ω—å, –∞ —Ç–∏ –æ—Ç—Ä–∏–º–∞—î—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É –≤–∏–≥–ª—è–¥—ñ –≥–µ–Ω–µ—Ç–∏—á–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑—É üîÆ."
        )
    )

## Handlers –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—á–∏ –∑–∞ clear(—Ç–∏–º—á–∞—Å–æ–≤–∞ –∫–æ–º–∞–Ω–¥–∞)
@user_private_router.message(Command("clear"))
async def command_clear_handler(message: Message, state: FSMContext):
    image = os.path.join('assets', 'image', 'photo_2024-10-30_15-01-47.jpg')

    await state.clear()
    await message.answer_photo(photo=FSInputFile(image), caption="Clear!!")


## Handlers –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—á–∏ –∑–∞ survey
@user_private_router.message(StateFilter(None), or_f(Command("survey"), (F.text.lower() == "–æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è")))
async def command_start_handler(message: Message, state: FSMContext):
    image = os.path.join('assets', 'image', 'photo_2024-10-16_08-56-42.jpg')

    user_data = await state.get_data()
    user_id = message.from_user.id
    await state.update_data(user_id=user_id)

    await state.set_state(MessageState.quest_1)
    await state.update_data(quests={
        "start_quest": {
            "survey_number": None,
            "result_quest1": None,
            "result_quest2": None,
            "result_quest3": None
        },
        "gen": {
            1: None,
            2: None
        }
    })

    await message.answer_photo(photo=FSInputFile(image), caption="–û–±–µ—Ä—ñ—Ç—å –æ–∑–Ω–∞–∫—É –∑–∞ —è–∫–æ—é –≤–∏ –ø—Ä–æ–π–¥–µ—Ç–µ –¥–≤–∞ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è (–í—ñ–¥ —Å–µ–±–µ —ñ —Å–≤–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞): ",
                                            reply_markup=get_callback_btns(btns={
                                                "–ö–æ–ª—ñ—Ä –æ—á–µ–π": "type_of_color_eye_first",
                                                "–ì—Ä—É–ø–∞ –∫—Ä–æ–≤—ñ": "type_of_blood_first",
                                                "–ù–∞–∑–∞–¥": "return",
                                                "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏": "cancel",
                                            }))
    

## Handlers —è–∫—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ –∑–∞ "–ù–∞–∑–∞–¥" —Ç–∞ "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏"

# Handlers –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—á–∏ –∑–∞ cancel
@user_private_router.callback_query(StateFilter("*"), F.data.startswith("cancel"))
async def cancel_handler(callback: types.CallbackQuery, state: FSMContext) -> None:
    curent_state = await state.get_state()
    if curent_state is None:
        return
    
    user_data = await state.get_data()
    quests = user_data.get("quests", {})
    survey_number = (quests.get("start_quest", {}).get("survey_number") or 0) - 1

    if survey_number < 0:
        survey_number = 0
    
    quests['start_quest']['survey_number'] = survey_number
    await state.update_data(quests=quests)

    await state.clear()
    await callback.message.answer("–û–ø–∏—Ç—É–≤–∞–Ω–Ω—è –±—É–ª–∞ –≤—ñ–¥–º—ñ–Ω–µ–Ω–æ")

## Handlers –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—á–∏ –∑–∞ back
@user_private_router.callback_query(StateFilter("*"), F.data.startswith("return"))
async def back_step_handler(callback: types.CallbackQuery, state: FSMContext) -> None:
    current_state = await state.get_state()
    user_data = await state.get_data()
    quests = user_data.get('quests', {})

    if current_state == MessageState.quest_1:
        sticker = os.path.join('assets', 'image', 'svabodin.webm')
        await callback.message.answer_sticker(sticker=FSInputFile(sticker), emoji="ü§¨")
        await callback.message.answer("–ê –≤—Å–µ! –ù–µ–º–∞ –∫—É–¥–∏ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏—Å—è, –∞–Ω–ª–∞–∫ –±—Ä–æ", reply_markup=types.ReplyKeyboardRemove())
        return

    previous_question = quests['start_quest'].get('result_quest1', None)

    await callback.message.answer("–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è. –ó–∞—á–µ–∫–∞–π—Ç–µ –ø–æ–∫–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å—Å—è –ø–∏—Ç–∞–Ω–Ω—è")

    if previous_question == 'type_of_color_eye_first':
        if current_state == MessageState.quest_2:
            await command_start_handler(callback.message, state)

        elif current_state == MessageState.quest_3:
            await second_quest_eye(callback, state)

        elif current_state == MessageState.stage_1:
            await third_quest_eye(callback, state)

    elif previous_question == 'type_of_blood_first':
        if current_state == MessageState.quest_2:
            await command_start_handler(callback.message, state)

        elif current_state == MessageState.quest_3:
            await second_quest_blood(callback, state)

        elif current_state == MessageState.stage_1:
            await third_quest_blood(callback, state)


    elif previous_question == 'type_of_color_eye_second':
        if current_state == MessageState.st_quest_2:
            await command_start_handler(callback.message, state)

        elif current_state == MessageState.st_quest_3:
            await second_questionare(callback, state)

        elif current_state == MessageState.stage_2:
            await third_quest_eye(callback, state)

    elif previous_question == 'type_of_blood_second':
        if current_state == MessageState.st_quest_2:
            await command_start_handler(callback.message, state)

        elif current_state == MessageState.st_quest_3:
            await second_quest_blood(callback, state)

        elif current_state == MessageState.stage_2:
            await third_quest_blood(callback, state)
        
    previous = None
    for step in MessageState.__all_states__:
        if step.state == current_state:
            await state.set_state(previous)
            return

        previous = step
