import json
from aiogram import types, Router, F

from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.filters import CommandStart, Command, or_f, StateFilter
from aiogram.types import FSInputFile, Message

from keyboard.InlineKeyboard import get_callback_btns
from service.analysis_data import Punnett_table, analis
from filters.chat_types import ChatTypeFilter

user_private_router = Router()
user_private_router.message.filter(ChatTypeFilter(['private']))


class Message_State(StatesGroup):
    quest_1 = State()
    quest_2 = State()
    quest_3 = State()
    # start_easy_survey = State()
    # start_detailed_survey = State()
    analis_answer = State()
    # get_result = State()

open("database/temp_data.json", 'w').close()

@user_private_router.message(Command("help"))
async def command_help_handler(message: Message):
    if message.text == "/help":
        stickers = FSInputFile("photos\hi.webp")
        await message.answer_sticker(sticker=stickers, emoji="üëã")
        await message.answer(text=("üëã –ü—Ä–∏–≤—ñ—Ç! –¶–µ–π –±–æ—Ç –¥–æ–ø–æ–º–æ–∂–µ –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –≥–µ–Ω–µ—Ç–∏—á–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è üß¨, –∑–æ–∫—Ä–µ–º–∞ –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –º–æ–∂–ª–∏–≤—ñ –≥–µ–Ω–æ—Ç–∏–ø–∏ —Ç–∞ –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—á—ñ –æ–∑–Ω–∞–∫ –Ω–∞—â–∞–¥–∫–∞–º üå± –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Ç–∞–±–ª–∏—Ü—ñ –ü–µ–Ω–Ω–µ—Ç–∞ üìä. \n–î—ñ–∑–Ω–∞–≤–∞–π—Å—è –±—ñ–ª—å—à–µ –ø—Ä–æ –≥–µ–Ω–µ—Ç–∏–∫—É —ñ —Å–≤–æ—ó —Å–ø–∞–¥–∫–æ–≤—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –∑–∞–≤–¥—è–∫–∏ —Ü—ñ–º –∫–æ–º–∞–Ω–¥–∞–º!\n" + " " * 20 + "=>    /start - –∑–∞–ø—É—Å–∫–∞—î –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è\n" + " " * 20 + "=>    /history - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ—à–ª–∏—Ö –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è\n" + " " * 20 + "=>    /quest - –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—å"))

@user_private_router.message(StateFilter(None), or_f(CommandStart(), (F.text.lower() == "—Å—Ç–∞—Ä—Ç")))
async def signs_message(message: Message, state: FSMContext):
    if message.text == "/start":
        image = FSInputFile("photos\photo_2024-09-01_09-52-18.jpg")
        await message.answer_photo(photo=image, caption="–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è",
                                   reply_markup=get_callback_btns(btns={
                                       "–õ–µ–≥–∫–µ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è": "eaysy_survey",
                                       "–î–µ—Ç–∞–ª—å–Ω–µ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è": "detailed_survey",
                                   }))


@user_private_router.message(F.text.lower() == "—ç–π —Ç—ã –≤–∏–¥–µ—à—å –º–µ–Ω—è?")
async def see_me(message: Message):
    video = FSInputFile("photos\IMG_5115.MP4")
    await message.answer_video(video=video)

@user_private_router.callback_query(F.data.startswith('eaysy_survey'))
async def eaysy_survey(callback: types.CallbackQuery, state: FSMContext):
    image = FSInputFile("photos\photo_2024-10-16_08-56-42.jpg")
    if callback.data.startswith('eaysy_survey'):
        await state.set_state(Message_State.quest_1)
        await callback.message.answer_photo(photo=image, caption="–ó–∞ —è–∫–∏–º–∏ –æ–∑–Ω–∞–∫–∞–º–∏ –≤–∏ —Ö–æ—Ç—ñ–ª –±–∏ —Ä–æ–∑–ø–æ—á–∞—Ç–∏?",
                                            reply_markup=get_callback_btns(btns={
                                                "–ö–æ–ª—ñ—Ä –æ—á–µ–π": "type_of_color_eye",
                                                "–ì—Ä—É–ø–∞ –∫—Ä–æ–≤—ñ": "type_of_blood",
                                            }))
    else:
        await callback.message.answer("–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑")

@user_private_router.callback_query(F.data.startswith('detailed_survey'))
async def detailed_survey(callback: types.CallbackQuery):
    video = FSInputFile("photos\RPReplay_Final1705860476.mp4")
    await callback.message.answer_video(video=video, caption="–û–π –æ–π –æ–π –∞ —Ü–µ —â–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ, —Å–æ—Å–∏ –±—ñ–±—É")

## –í—Å–µ –ø—Ä–æ –æ—á–∏
@user_private_router.callback_query(Message_State.quest_1, F.data.startswith('type_of_color_eye'))
async def first_quest(callback: types.CallbackQuery, state: FSMContext):
    gif = FSInputFile('photos\–∞–ª–ª–∞—Ö-—Ö–∞–ª—è–ª—å.gif')
    if callback.data.startswith('type_of_color_eye'):
        await state.set_state(Message_State.quest_2)
        await callback.message.answer_animation(animation=gif,
                                                reply_markup=get_callback_btns(btns={
                                                    "–ë–ª–∞–∫–∏—Ç–Ω—ñ": "blue",
                                                    "–ö–∞—Ä—ñ": "kari",
                                                    "–ó–µ–ª–µ–Ω–æ/–°–≤—ñ—Ç–ª–æ –∫–∞—Ä—ñ": "green/light_brown",
                                                }))
        
        
## –í—Å–µ –ø—Ä–æ –∫–∞—Ä—ñ–π
@user_private_router.callback_query(Message_State.quest_2, F.data.startswith('kari'))
async def second_quest(callback: types.CallbackQuery, state: FSMContext):
    image = FSInputFile('photos/furry-—Ñ—ç–Ω–¥–æ–º—ã-furry-m-8352840.jpeg')
    if callback.data.startswith('kari'):
        await state.set_state(Message_State.analis_answer)
        await callback.message.answer_photo(photo=image,
                                            caption="–ß–∏ –±—É–ª–∏ –≤ –æ–¥–Ω–æ –∑ –±–∞—Ç—å–∫–≤—ñ, –±—Ä–∞—Ç—ñ–≤/—Å–µ—Å—Ç–µ—Ä –±–ª–∞–∫–∏—Ç–Ω—ñ –æ—á—ñ?",
                                            reply_markup=get_callback_btns(btns={
                                                "–¢–∞–∫": "final_yes_kari",
                                                "–ù—ñ": "final_no_kari",
                                            }))


@user_private_router.callback_query(Message_State.analis_answer, F.data.startswith('final_yes_kari'))
async def analis_answer(callback: types.CallbackQuery, state: FSMContext):
    if callback.data.startswith('final_yes_kari'):

        data = {
        'gen': "Aa, aa"
        }

        analis(data=data)

        male_genotype, children_genotypes, percentage, female_genotype = Punnett_table()
        await callback.message.answer(text=f"{male_genotype}; \n{female_genotype}; \n{children_genotypes}; \n{percentage}")
        await state.clear()


@user_private_router.callback_query(Message_State.analis_answer, F.data.startswith('final_no_kari'))
async def analis_answer_no(callback: types.CallbackQuery, state: FSMContext):
    if callback.data.startswith('final_no_kari'):

        data = {
        'gen': "AA, Aa"
        }

        analis(data=data)
        
        male_genotype, children_genotypes, percentage, female_genotype = Punnett_table()
        await callback.message.answer(text=f"{male_genotype}; \n{female_genotype}; \n{children_genotypes}; \n{percentage}")
        await state.clear()



## –í—Å–µ –ø—Ä–æ –±–ª–∞–∫–∏—Ç–Ω–∏–π
@user_private_router.callback_query(Message_State.quest_2, F.data.startswith('blue'))
async def analis_answer_blue(callback: types.CallbackQuery, state: FSMContext):
    if callback.data.startswith('blue'):

        data = {
            'gen': 'aa, aA'
        }

        analis(data=data)

        male_genotype, children_genotypes, percentage, female_genotype = Punnett_table()
        await callback.message.answer(text=f"{male_genotype}; \n{female_genotype}; \n{children_genotypes}; \n{percentage}")
        await state.clear()

## –í—Å–µ –ø—Ä–æ —Å–≤—ñ—Ç–ª–æ –∑–µ–ª–µ–Ω–æ –±–ª–∞–∫–∏—Ç–Ω–∏–π
@user_private_router.callback_query(Message_State.quest_2, F.data.startswith('green/light_brown'))
async def analis_answer_green_light_brown(callback: types.CallbackQuery, state: FSMContext):
    if callback.data.startswith('green/light_brown'):

        data = {
            'gen': 'AA, aa'
        }

        analis(data=data)

        male_genotype, children_genotypes, percentage, female_genotype = Punnett_table()
        await callback.message.answer(text=f"{male_genotype}; \n{female_genotype}; \n{children_genotypes}; \n{percentage}")
        await state.clear()

## –í—Å–µ –ø—Ä–æ –≥—Ä—É–ø—É –∫—Ä–æ–≤—ñ
@user_private_router.callback_query(Message_State.quest_1, F.data.startswith('type_of_blood'))
async def eaysy_survey(callback: types.CallbackQuery, state: FSMContext):
    image = FSInputFile('photos\photo_2024-10-19_10-02-38.jpg')
    if callback.data.startswith('type_of_blood'):
        await state.set_state(Message_State.quest_2)
        await callback.message.answer_photo(photo=image, caption="–Ø–∫–∞ –≤–∞—à–∞ –≥—Ä—É–ø–∞ –∫—Ä–æ–≤—ñ?",
                                            reply_markup=get_callback_btns(btns={
                                                "I(O)": "first_blood",
                                                "II(A)": "second_blood",
                                                "III(B)": "third_blood",
                                                "IV(AB)": "fourth_blood",
                                            }))
    else:
        await callback.message.answer("–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑")


## –ü–µ—Ä—à–∞ –≥—Ä—É–ø–∞ –∫—Ä–æ–≤—ñ
@user_private_router.callback_query(Message_State.quest_2, F.data.startswith("first_blood"))
async def first_quest(callback: types.CallbackQuery, state: FSMContext):
    gif = FSInputFile('photos\komaru-–∫–æ–º–∞—Ä—É.gif')
    if callback.data.startswith('first_blood'):
        data = {
            'gen': 'OO, Aa'
        }

        analis(data=data)

        male_genotype, children_genotypes, percentage, female_genotype = Punnett_table()
        await callback.message.answer(text=f"{male_genotype}; \n{female_genotype}; \n{children_genotypes}; \n{percentage}")
        await state.clear()


## –î—Ä—É–≥–∞ –≥—Ä—É–ø–∞ –∫—Ä–æ–≤—ñ
@user_private_router.callback_query(Message_State.quest_2, F.data.startswith("second_blood"))
async def first_quest(callback: types.CallbackQuery, state: FSMContext):
    video = FSInputFile('photos\—ç–ø–∏–∫ —Ñ–µ–π–ª.mp4')
    if callback.data.startswith('second_blood'):
        await state.set_state(Message_State.analis_answer)
        await callback.message.answer_video(video=video,
                                            caption="–ß–∏ –±—É–ª–∞ –≤ –æ–¥–Ω–æ–≥–æ –∑ –±–∞—Ç—å–∫—ñ–≤, –±—Ä–∞—Ç—ñ–≤\—Å–µ—Å—Ç–µ—Ä I(–û) –≥—Ä—É–ø–∞ –∫—Ä–æ–≤—ñ?",
                                            reply_markup=get_callback_btns(btns={
                                                "–¢–∞–∫": "final_yes_blood",
                                                "–ù—ñ": "final_no_blood",
                                            }))

@user_private_router.callback_query(Message_State.analis_answer, F.data.startswith('final_yes_blood'))
async def analis_answer(callback: types.CallbackQuery, state: FSMContext):
    if callback.data.startswith('final_yes_blood'):

        data = {
        'gen': "AO, aa"
        }

        analis(data=data)

        male_genotype, children_genotypes, percentage, female_genotype = Punnett_table()
        await callback.message.answer(text=f"{male_genotype}; \n{female_genotype}; \n{children_genotypes}; \n{percentage}")
        await state.clear()


@user_private_router.callback_query(Message_State.analis_answer, F.data.startswith('final_no_blood'))
async def analis_answer_no(callback: types.CallbackQuery, state: FSMContext):
    if callback.data.startswith('final_no_blood'):

        data = {
        'gen': "AA, aA"
        }

        analis(data=data)
        
        male_genotype, children_genotypes, percentage, female_genotype = Punnett_table()
        await callback.message.answer(text=f"{male_genotype}; \n{female_genotype}; \n{children_genotypes}; \n{percentage}")
        await state.clear()

## –¢–µ—Ä—Ç—å—Å—è –≥—Ä—É–ø–∞ –∫—Ä–æ–≤—ñ
@user_private_router.callback_query(Message_State.quest_2, F.data.startswith("third_blood"))
async def first_quest(callback: types.CallbackQuery, state: FSMContext):
    image = FSInputFile('photos\wqdasd.jpg')
    if callback.data.startswith('third_blood'):
        await state.set_state(Message_State.analis_answer)
        await callback.message.answer_photo(photo=image,
                                            caption="–ß–∏ –±—É–ª–∞ –≤ –æ–¥–Ω–æ–≥–æ –∑ –±–∞—Ç—å–∫—ñ–≤, –±—Ä–∞—Ç—ñ–≤\—Å–µ—Å—Ç–µ—Ä I(–û) –≥—Ä—É–ø–∞ –∫—Ä–æ–≤—ñ?",
                                            reply_markup=get_callback_btns(btns={
                                                "–¢–∞–∫": "final_yes_blood",
                                                "–ù—ñ": "final_no_blood",
                                            }))

@user_private_router.callback_query(Message_State.analis_answer, F.data.startswith('final_yes_blood'))
async def analis_answer(callback: types.CallbackQuery, state: FSMContext):
    if callback.data.startswith('final_yes_blood'):

        data = {
        'gen': "BB, OA"
        }

        analis(data=data)

        male_genotype, children_genotypes, percentage, female_genotype = Punnett_table()
        await callback.message.answer(text=f"{male_genotype}; \n{female_genotype}; \n{children_genotypes}; \n{percentage}")
        await state.clear()


@user_private_router.callback_query(Message_State.analis_answer, F.data.startswith('final_no_blood'))
async def analis_answer_no(callback: types.CallbackQuery, state: FSMContext):
    if callback.data.startswith('final_no_blood'):

        data = {
        'gen': "BO, AO"
        }

        analis(data=data)
        
        male_genotype, children_genotypes, percentage, female_genotype = Punnett_table()
        await callback.message.answer(text=f"{male_genotype}; \n{female_genotype}; \n{children_genotypes}; \n{percentage}")
        await state.clear()

## –ß–µ—Ç–≤–µ—Ä—Ç–∞ –≥—Ä—É–ø–∞ –∫—Ä–æ–≤—ñ
@user_private_router.callback_query(Message_State.quest_2, F.data.startswith("fourth_blood"))
async def first_quest(callback: types.CallbackQuery, state: FSMContext):
    gif = FSInputFile('photos\image0-156-1-1.gif')
    if callback.data.startswith('fourth_blood'):
        data = {
            'gen': 'AB, OO'
        }

        analis(data=data)

        male_genotype, children_genotypes, percentage, female_genotype = Punnett_table()
        await callback.message.answer(text=f"{male_genotype}; \n{female_genotype}; \n{children_genotypes}; \n{percentage}")
        await state.clear()


# print("Provekra 1")
# @user_private_router.message(Message_State.get_result)
# async def execute_table(message: types.Message, state: FSMContext):
#     print("Provekra 2")
#     male_genotype, children_genotypes, percentage, female_genotype = Punnett_table()
#     print("Provekra 3")
#     await message.answer(text=f"{male_genotype}; \n{female_genotype}; \n{children_genotypes}; \n{percentage}")
    
#     await state.clear()






